@use "sass:math";

.#{$vfms-prefix}repeater, .#{$vfms-prefix}repeater-table {
    display: grid;
    position: relative;

    .#{$vfms-prefix}repeater-item {
        display: contents;
    }

    .#{$vfms-prefix}btn-repeater-move {
        cursor: move;
        background-image: none;
        &:hover {
            border: 1px dashed $border-color;
        }
    }

    .#{$vfms-prefix}repeater-item-control {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .#{$vfms-prefix}repeater-append {
        grid-column: 1 / -1;
        margin-top: $table-cell-padding-y;
    }

    // Repeater item moving
    // When a row is being moved, divs are added to the dom to act as targets for dropping the row into a new position
    // For each row, there's a move-before target, and a move-after target
    // By using absolute position within the grid, we can use the grid lines to position the targets over the top of
    // existing grid content without them taking up any 'slots' in the grid
    // This works very nicely, but it does depend on the --row-num css val being set in the vue template
    .#{$vfms-prefix}repeater-item.#{$vfms-prefix}is-moving {
        opacity: 0.5;
    }
    .#{$vfms-prefix}repeater-move-target {
        position: absolute;
        z-index: 1;
        grid-column: 1 / -1;
        left: 0px;
        right: 0px;
        border: 0px dashed transparent;
        &:hover {
            border-color: $repeater-move-indicator-color;
        }
        &.#{$vfms-prefix}move-before {
            top: - math.div($repeater-move-indicator-size, 2);
            bottom: 50%;
            border-top-width: $repeater-move-indicator-size;
        }
        &.#{$vfms-prefix}move-after {
            top: 50%;
            bottom: - math.div($repeater-move-indicator-size, 2);
            border-bottom-width: $repeater-move-indicator-size;
        }
    }
}

// Styles that apply to repeater fields but not to repeater-table fields
.#{$vfms-prefix}repeater {
    grid-template-columns: min-content minmax(0, 1fr);

    border-top: 1px solid $border-color;
    border-left: 1px solid $border-color;

    .#{$vfms-prefix}repeater-item-control, .#{$vfms-prefix}repeater-item-content {
        padding: 1rem;
        border-bottom: 1px solid $border-color;
        border-right: 1px solid $border-color;
    }

    .#{$vfms-prefix}repeater-item-content.is-invalid {
        border: 1px solid $form-feedback-invalid-color;
    }

    .#{$vfms-prefix}repeater-move-target {
        grid-row: var(--row-num) / span 1;
    }
}

// Styles that apply to repeater table fields but not to repeater fields
.#{$vfms-prefix}repeater-table {
    grid-template-columns: min-content repeat(var(--num-cols), minmax(0, 1fr));

    .#{$vfms-prefix}repeater-table-cell {
        padding: $table-cell-padding-y $table-cell-padding-x;
    }

    // Add an underlay div covering the whole row - this will be used to add borders
    .#{$vfms-prefix}repeater-table-header::after, .#{$vfms-prefix}repeater-item::after {
        display: block;
        content: "";
        position: absolute;
        grid-column: 1 / -1;
        top: 0px;
        left: 0;
        right: 0;
        bottom: -$table-border-width;
    }

    .#{$vfms-prefix}repeater-table-header {
        display: contents;
        font-weight: $repeater-table-header-font-weight;
        :first-child {
            // The header doesn't have any content in col 1
            grid-column-start: 2;
        }
        // Thick border under the header
        &::after {
            grid-row: 1 / span 1;
            border-bottom: (2 * $table-border-width) solid $table-group-separator-color;
            z-index: -2;
        }
    }

    .#{$vfms-prefix}repeater-table-item-errors {
        grid-column: 2 / -1;
    }

    .#{$vfms-prefix}repeater-item {
        > .#{$vfms-prefix}repeater-table-cell {
            // if the item is valid, then there will be no item errors
            // so each field should span both of this item's grid rows
            grid-row-end: span 2;
        }
        &.is-invalid > .#{$vfms-prefix}repeater-table-cell:not(.#{$vfms-prefix}repeater-item-control) {
            // If the item is not valid, then the errors will go into the second row,
            // so the fields should only use one of the grid rows
            grid-row-end: span 1;
        }

        // Border top and bottom on valid rows
        &::after {
            grid-row: var(--row-num) / span 2;
            border-top: $table-border-width solid $table-border-color;
            border-bottom: $table-border-width solid $table-border-color;
            z-index: -3;
        }
        // Red border around the row if it is invalid
        &.is-invalid::after {
            border: $table-border-width solid $form-feedback-invalid-color;
            z-index: -1; // Higher z-index than the valid rows so the invalid state is on top
        }
    }

    .#{$vfms-prefix}repeater-item .#{$vfms-prefix}repeater-move-target {
        grid-row: var(--row-num) / span 2;
    }
}
